<script>
document.addEventListener("DOMContentLoaded", function () {
    setTimeout(function () {
        // Get references to input fields and spans
        const numberInput = document.getElementById("number"),
              dragNumberInput = document.getElementById("drag-number"),
              investmentAmount = document.getElementById("Investment-amount"),
              taxSpan = document.querySelector(".tax-deduction-span"),
              roiSpan = document.querySelector(".roi-span"),
              annualEarningSpan = document.querySelector(".annual-earning-span"),
              taxInfoSpan = document.querySelector(".tax-info"),
              fsRangeSlider = document.querySelector(".fs-rangeslider_wrapper"); // Assuming this is the Finsweet range slider

        // Set default placeholder text for the number input field
        numberInput.placeholder = "Amount";

        // Function to format numbers with two decimal places and locale string format
        function formatNumber(value) {
            return parseFloat(value).toLocaleString("en-US", {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });
        }

        // Function to update calculated values
        function updateValues(value) {
            const numericValue = parseFloat(value) || 0;
            taxSpan.textContent = formatNumber(numericValue * 0.186); //Calculating the tax
            taxInfoSpan.textContent = formatNumber(numericValue * 0.186); //Calculating the tax for the popup (should be the same as upper one)
            roiSpan.textContent = formatNumber(numericValue * 2.22); //Calculating the return on investment
            annualEarningSpan.textContent = formatNumber(numericValue * 2.22 / 30); //Calculating the annual earnings
        }

        // Clear initial input values
        numberInput.value = '';
        dragNumberInput.value = '';
        investmentAmount.value = '';

        let userInteracted = false;

        // Function to handle input formatting for both inputs
        function formatInput(value) {
            // Remove all non-numeric characters except dots, commas, and €
            value = value.replace(/[^0-9,.€]/g, "");
            return value;
        }

        // Event listener for manual number input field
        numberInput.addEventListener("input", function () {
            let value = formatInput(numberInput.value);
            investmentAmount.value = value;
            dragNumberInput.value = value;
            updateValues(value);
            userInteracted = true;
        });

        // Format input with currency symbol on blur
        numberInput.addEventListener("blur", function () {
            if (numberInput.value && !numberInput.value.includes("€")) {
                numberInput.value = formatNumber(numberInput.value) + "€";
            }
        });

        // Remove currency symbol when input is focused
        numberInput.addEventListener("focus", function () {
            if (numberInput.value.includes("€")) {
                numberInput.value = numberInput.value.replace("€", "");
            }
        });

        // Event listener for drag number input field
        dragNumberInput.addEventListener("input", function () {
            let value = formatInput(dragNumberInput.value);
            if (value) {
                // Append the EUR sign to the value of the drag input
                numberInput.value = formatNumber(value) + "€";
                dragNumberInput.value = value + "€"; // Add EUR sign at the end of dragNumberInput
            }
            investmentAmount.value = value;
            updateValues(value);
            userInteracted = true;
            
            // Update Finsweet range slider value
            if (fsRangeSlider) {
                fsRangeSlider.value = value;
                fsRangeSlider.dispatchEvent(new Event("input"));
            }
        });

        // Format drag input value on blur
        dragNumberInput.addEventListener("blur", function () {
            if (dragNumberInput.value) {
                // Ensure drag input value is formatted correctly with EUR sign at the end
                dragNumberInput.value = formatNumber(dragNumberInput.value.replace("€", "")) + "€";
            }
        });

        // Reset values when the user has not interacted manually
        numberInput.addEventListener("input", function () {
            if (!userInteracted) {
                dragNumberInput.value = "";
            }
        });

        dragNumberInput.addEventListener("input", function () {
            if (!userInteracted) {
                numberInput.value = "";
            }
        });
    }, 2000);
});
</script>
